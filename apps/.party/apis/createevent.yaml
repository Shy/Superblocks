blocks:
  - name: getEventNanoID
    step:
      integration: workflow
      workflow:
        custom: {}
        queryParams: {}
        superblocksMetadata:
          pluginVersion: 0.0.4
        workflow: c0df9702-f3ad-4d4d-bdc8-11ef9dda6f97
  - name: uploadImage
    step:
      integration: ace645e4-7398-48b4-91b7-44537ae9a45d
      restapiintegration:
        authType: api-key
        body: ""
        bodyType: formData
        fileFormKey: file
        fileName: ""
        formData:
          - key: image
            value: "{{eventBGUpload.files[0].readContents()}}"
            valueOptions: []
        headers: []
        httpMethod: POST
        jsonBody: ""
        openApiAction: ""
        openApiSpecRef: ""
        params: []
        responseType: auto
        superblocksMetadata:
          pluginVersion: 0.0.12
        urlBase: ""
        urlPath: /3/image
  - name: createEventSQL
    step:
      integration: 57650726-5907-47e7-bf54-2d33c7a19838
      postgres:
        body: |-
          -- You can use SQL to query data (ex. SELECT * FROM orders;)

          INSERT INTO "public"."events"("public_id", "event", "date", "location", "description","image_id","week_out_message","day_out_message","hour_out_message") VALUES({{getEventNanoID.output}}, {{createNewEventName.value}}, {{createNewEventDate.outputDateUtc}}, {{createNewEventLocation.value}}, {{createNewEventDescription.value}},{{uploadImage.output.data.id}},{{createNewEventWeekSMS.value}},{{createNewEventDaySMS.value}},{{createNewEventHourSMS.value}}) RETURNING *;
        filterBy: []
        mappedColumns: []
        operation: run_sql
        usePreparedSql: true
  - name: getJunctionNanoID
    step:
      integration: workflow
      workflow:
        custom: {}
        queryParams: {}
        workflow: c0df9702-f3ad-4d4d-bdc8-11ef9dda6f97
  - name: createFirstJunction
    step:
      integration: 57650726-5907-47e7-bf54-2d33c7a19838
      postgres:
        body: |-
          INSERT INTO event_attendee_junction (public_id, attendee_id, event_id ,rsvp) 
          VALUES ({{getJunctionNanoID.output}}, 'f9ed72ec-3323-46c6-854f-c20721da4022', {{createEventSQL.output[0].id}},'attending') returning *;
        filterBy: []
        mappedColumns: []
        operation: run_sql
        usePreparedSql: true
metadata:
  description: ""
  folder: ""
  id: 7f0cc638-95c4-407f-a536-550d0a2335ba
  name: createEvent
  organization: d5261f83-ea48-40f1-a8b7-c779a60cb2eb
  tags: {}
  timestamps: {}
  version: ""
trigger:
  application:
    id: d61a0b6b-1163-4406-b3f3-ad711db21979
    options: {}
